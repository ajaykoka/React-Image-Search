{"version":3,"sources":["components/ImageCard.js","components/ImageSearch.js","App.js","reportWebVitals.js","index.js"],"names":["ImageCard","imageData","tags","split","console","log","className","src","webformatURL","alt","user","views","downloads","likes","map","tag","index","hey","ImageSearch","searchText","useState","text","setText","onSubmit","e","preventDefault","onChange","target","value","type","placeholder","App","images","setImages","isLoading","setIsLoading","term","setTerm","useEffect","fetch","process","then","res","json","data","hits","catch","err","length","image","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MA0CeA,EAvCG,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACXC,EAAOD,EAAUC,KAAKC,MAAM,KAGlC,OAFAC,QAAQC,IAAIH,GAGR,sBAAKI,UAAU,6CAAf,UACI,qBAAKC,IAAKN,EAAUO,aAAcC,IAAI,GAAGH,UAAU,WAEnD,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,uCAAf,SACKL,EAAUS,OAEf,+BACI,+BACI,6CACCT,EAAUU,SAEf,+BACI,iDACCV,EAAUW,aAEf,+BACI,6CACCX,EAAUY,eAIvB,qBAAKP,UAAU,YAAf,SACKJ,EAAKY,KAAI,SAACC,EAAKC,GAAN,OACN,uBAAMC,IAAKD,EAAOV,UAAU,2FAA5B,cAAyHS,cC9BhIG,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC1B,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAQA,OACI,qBAAKhB,UAAU,iDAAf,SACI,sBAAMA,UAAU,kBAAkBiB,SAPzB,SAACC,GACdA,EAAEC,iBACFN,EAAWE,IAKP,SACI,sBAAKf,UAAU,gDAAf,UACI,uBAAOoB,SAAY,SAAAF,GAAC,OAAIF,EAAQE,EAAEG,OAAOC,QAAOC,KAAK,OAAOvB,UAAU,2MAA2MwB,YAAY,iBAC7R,wBAAQxB,UAAU,iJAAlB,8BCwBLyB,MAnCf,WAEE,MAA4BX,mBAAS,IAArC,mBAAOY,EAAP,KAAeC,EAAf,KACA,EAAkCb,oBAAS,GAA3C,mBAAOc,EAAP,KAAkBC,EAAlB,KACA,EAAwBf,mBAAS,IAAjC,mBAAOgB,EAAP,KAAaC,EAAb,KAWA,OAVAC,qBAAU,WACRC,MAAM,gCAAD,OAAiCC,qCAAjC,cAA4EJ,EAA5E,kCACJK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJX,EAAUW,EAAKC,MACfV,GAAa,MAEdW,OAAO,SAAAC,GAAG,OAAI3C,QAAQC,IAAI0C,QAC1B,CAACX,IAGF,sBAAK9B,UAAU,oBAAf,UACE,cAAC,EAAD,CAAaa,WAAY,SAACE,GAAD,OAAUgB,EAAQhB,OAIzCa,GAA+B,IAAlBF,EAAOgB,QAAgB,oBAAI1C,UAAU,qCAAd,gCAErC4B,EAAY,4CACT,qBAAK5B,UAAU,0BAAf,SACG0B,EAAOlB,KAAI,SAAAmC,GAAK,OACf,cAAC,EAAD,CAAWhC,IAAKgC,EAAMC,GAAIjD,UAAagD,aCnBtCE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.051979f1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n//rafce command \r\nconst ImageCard = ({ imageData }) => {\r\n    const tags = imageData.tags.split(',')\r\n    console.log(tags)\r\n\r\n    return (\r\n        <div className=\"max-w-sm rounded overflow-hidden shadow-lg\">\r\n            <img src={imageData.webformatURL} alt=\"\" className=\"w-full\" />\r\n            \r\n            <div className=\"px-6 py-4\">\r\n                <div className=\"font-bold text-blue-400 text-xl mb-2\">\r\n                    {imageData.user}\r\n                </div>\r\n                <ul>\r\n                    <li>\r\n                        <strong> Views:</strong>\r\n                        {imageData.views}\r\n                    </li>\r\n                    <li>\r\n                        <strong> Downloads:</strong>\r\n                        {imageData.downloads}\r\n                    </li>\r\n                    <li>\r\n                        <strong> Likes:</strong>\r\n                        {imageData.likes}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"px-6 py-4\">\r\n                {tags.map((tag, index) => (\r\n                    <span hey={index} className=\"inline-block bg-blue-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\">#{tag}</span>\r\n                )\r\n                \r\n                )}\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageCard\r\n","import React, { useState } from 'react'\r\n\r\nexport const ImageSearch = ({ searchText }) => {\r\n    const [text, setText] = useState('')\r\n\r\n    //onSubmit form\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        searchText(text);\r\n\r\n    }\r\n    return (\r\n        <div className=\"max-w-sm rounded overflow-hidden my-10 mx-auto\">\r\n            <form className=\"w-full max-w-sm\" onSubmit={onSubmit}>\r\n                <div className=\"flex items-center border-b-2 border-none py-2\">\r\n                    <input onChange = {e => setText(e.target.value)}type=\"text\" className=\"appearence-none bg-transparent border-l-2 border-t-2 border-b-2 hover:border-green-500 border-blue-500 w-full rounded-l-2xl text-gray-700 hover:text-red-400 py-1 px-2 leading-tight focus:outline-none \" placeholder=\"Search Image\" />\r\n                    <button className=\"flex-shrink-0 bg-none hover:bg-blue-700 border-blue-500 hover:border-blue-700 text-sm border-r-2 border-t-2 border-b-2 py-1 px-2 rounded-r-2xl\"> Search </button>\r\n                </div>\r\n            </form>\r\n            \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n","import { useState, useEffect } from \"react\";\nimport ImageCard from \"./components/ImageCard\";\nimport { ImageSearch } from \"./components/ImageSearch\";\n\n\nfunction App() {\n\n  const [images, setImages] = useState([]);  // useState is hook\n  const [isLoading, setIsLoading] = useState(true);\n  const [term, setTerm] = useState('');\n  useEffect(() => {\n    fetch(`https://pixabay.com/api/?key=${process.env.REACT_APP_PIXABAY_API_KEY}&q=${term}&image_type=photo&pretty=true`)\n    .then(res => res.json())\n    .then(data => {\n      setImages(data.hits);\n      setIsLoading(false);\n    })\n    .catch( err => console.log(err))\n  }, [term])\n\n  return (\n    <div className=\"container mx-auto\">\n      <ImageSearch searchText={(text) => setTerm(text)}/>\n      \n      {/* check for images loading */}\n\n      {!isLoading && images.length === 0 && <h1 className=\"text-center text-6xl mx-auto mt-32\">No images found...</h1>}\n      \n      {isLoading ? <h1>Loading...</h1> \n        : <div className=\"grid grid-cols-3  gap-4\">\n            {images.map(image => (\n              <ImageCard hey={image.id} imageData = {image} />\n            ))}\n          \n          </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './assets/main.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}